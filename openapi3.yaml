openapi: 3.0.1
security: []
info:
  title: 3d-gateway
  description: Validating and routing requests
  version: 2.6.0
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
paths:
  /models:
    post:
      operationId: createModel
      summary: Invokes a new model ingestion flow
      tags:
        - models
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/payload'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/job'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /models/validate:
    post:
      operationId: validate
      summary: Invokes a new model ingestion validation
      tags:
        - models
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/payloadForValidation'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/validateResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /models/{recordId}:
    delete:
      tags:
        - models
      summary: Delete model by record Id
      description: Model removal can only be done by manager.
      operationId: deleteModel
      parameters:
        - name: recordId
          in: path
          description: The model Id that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Delete Job Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/job'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: Record not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /models/canDelete/{recordId}:
    get:
      tags:
        - models
      summary: Validate if record can be removed
      description: ''
      operationId: validateDeleteById
      parameters:
        - name: recordId
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/validateResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /metadata/{identifier}:
    patch:
      operationId: updateMetadata
      summary: Updates metadata of a model
      tags:
        - metadata
      parameters:
        - $ref: '#/components/parameters/identifier'
      requestBody:
        content:
          application/json:
            schema:
              $ref: >-
                ./Schema/3dCatalog/3dMetadata.yaml#/components/schemas/updatePayload
      responses:
        '200':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/metadataResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /metadata/status/{identifier}:
    patch:
      operationId: updateStatus
      summary: Updates metadata of a model
      tags:
        - metadata
      parameters:
        - $ref: '#/components/parameters/identifier'
      requestBody:
        content:
          application/json:
            schema:
              $ref: >-
                ./Schema/3dCatalog/3dMetadata.yaml#/components/schemas/updateStatus
      responses:
        '200':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/metadataResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
components:
  parameters:
    identifier:
      in: path
      name: identifier
      required: true
      schema:
        type: string
      description: Metadata record identifier
  schemas:
    error:
      type: object
      required:
        - message
      properties:
        message:
          type: string
    payload:
      type: object
      description: 3d model payload
      required:
        - modelPath
        - tilesetFilename
        - metadata
      properties:
        modelPath:
          type: string
          description: Model files location path
          example: \\domtest\mimi\archi\maz\silver\libot\NewYork
        tilesetFilename:
          type: string
          description: Model tileset filename
          example: tileset.json
        metadata:
          $ref: ./Schema/3dCatalog/3dMetadata.yaml#/components/schemas/basic-payload
      additionalProperties: false
    payloadForValidation:
      type: object
      description: >-
        3d model payload, if metadta is not provided will validate only the
        sources
      required:
        - modelPath
        - tilesetFilename
      properties:
        modelPath:
          type: string
          description: Model files location path
          example: \\domtest\mimi\archi\maz\silver\libot\NewYork
        tilesetFilename:
          type: string
          description: Model tileset filename
          example: tileset.json
        metadata:
          $ref: '#/components/schemas/basic-payload'
      additionalProperties: false
    validateResponse:
      type: object
      properties:
        isValid:
          type: boolean
          example: true
        message:
          type: string
          example: Files are valid
      required:
        - isValid
    job:
      type: object
      description: job for ingestion 3d model
      required:
        - jobId
        - status
      properties:
        jobId:
          type: string
          format: uuid
          description: Ingestion job identifier
        status:
          type: string
          enum:
            - Completed
            - In-Progress
            - Pending
            - Failed
            - Expired
            - Aborted
    metadataResponse:
      type: object
      properties:
        metadata:
          allOf:
            - $ref: ./Schema/3dCatalog/3dMetadata.yaml#/components/schemas/metadata
            - type: object
              properties:
                links:
                  type: string
                  example: This is example
